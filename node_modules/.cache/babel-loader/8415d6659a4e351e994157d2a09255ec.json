{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Terrence Liu\\\\Documents\\\\Roomba Coding Challenge\\\\roomba-coding-challenge\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Files from \"react-files\";\nimport './index.css';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      roomDimensions: this.props.roomDimensions,\n      initialRoombaLocation: this.props.initialRoombaLocation,\n      dirtLocations: this.props.dirtLocations,\n      drivingInstructions: this.props.drivingInstructions,\n      result: []\n    };\n  }\n\n  renderTableData() {\n    return this.state.result.map((move, index) => {\n      const {\n        step,\n        roombaLocation,\n        action,\n        ttlDirtCollected,\n        ttlWallHits\n      } = move;\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: step\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: roombaLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: action\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: ttlDirtCollected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: ttlWallHits\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this)]\n      }, step, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }, this);\n    });\n  }\n\n  render() {\n    const eastWall = this.state.roomDimensions[0];\n    const southWall = this.state.roomDimensions[1];\n    var currRoombaLocation = this.state.initialRoombaLocation;\n    var wallHits = 0;\n    var dirtCollected = 0;\n    var listOfDirtCollected = [];\n    var initialIndexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1]); //check if start on dirt\n\n    if (initialIndexOfDirt != -1) {\n      dirtCollected++;\n      listOfDirtCollected.push(this.state.dirtLocations.splice(initialIndexOfDirt, 1));\n    }\n\n    this.state.result.push([{\n      step: 1,\n      roombaLocation: this.state.initialRoombaLocation,\n      action: \"\",\n      ttlDirtCollected: dirtCollected,\n      ttlWallHits: 0\n    }]); //create the initial row\n\n    for (var i = 0; i < this.state.drivingInstructions.length; i++) {\n      var currentInstruction = String.toUpperCase(this.state.drivingInstructions[i]);\n      var nextLocation = currRoombaLocation;\n\n      switch (currentInstruction) {\n        case \"N\":\n          nextLocation[1]--;\n          break;\n\n        case \"S\":\n          nextLocation[1]++;\n          break;\n\n        case \"W\":\n          nextLocation[0]--;\n          break;\n\n        case \"E\":\n          nextLocation[0]++;\n          break;\n\n        default:\n          console.log(\"Invalid Direction\");\n      }\n\n      if (nextLocation[0] < 0 || nextLocation[0] >= eastWall || nextLocation[1] < 0 || nextLocation[1] >= southWall) {\n        nextLocation = currRoombaLocation;\n        wallHits++;\n      }\n\n      currRoombaLocation = nextLocation;\n      var indexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1]);\n\n      if (indexOfDirt != -1) {\n        dirtCollected++;\n        listOfDirtCollected.push(this.state.dirtLocations.splice(indexOfDirt, 1));\n      }\n\n      this.state.result.push({\n        step: i,\n        roombaLocation: currRoombaLocation,\n        action: currentInstruction,\n        ttlDirtCollected: dirtCollected,\n        ttlWallHits: wallHits\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        id: \"steps\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.renderTableData()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass JSONButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsonFile: {}\n    };\n    this.fileReader = new FileReader();\n\n    this.fileReader.onload = event => {\n      this.setState({\n        jsonFile: JSON.parse(event.target.result)\n      }, () => {\n        console.log(this.state.jsonFile);\n      });\n    };\n  }\n\n  renderTable() {\n    return /*#__PURE__*/_jsxDEV(Table, {\n      value: this.state.jsonFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 16\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"files\",\n        children: /*#__PURE__*/_jsxDEV(Files, {\n          className: \"files-dropzone\",\n          onChange: file => {\n            this.fileReader.readAsText(file[0]);\n          },\n          onError: err => console.log(err),\n          accepts: [\".json\"],\n          multiple: true,\n          maxFiles: 1,\n          maxFileSize: 10000000,\n          minFileSize: 0,\n          clickable: true,\n          children: \"Drop files here or click to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Table\",\n        children: this.renderTable()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this);\n  }\n\n} // ==================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(JSONButton, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 145,\n  columnNumber: 5\n}, this));","map":{"version":3,"sources":["C:/Users/Terrence Liu/Documents/Roomba Coding Challenge/roomba-coding-challenge/src/index.js"],"names":["React","useState","ReactDOM","Files","Table","Component","constructor","props","state","roomDimensions","initialRoombaLocation","dirtLocations","drivingInstructions","result","renderTableData","map","move","index","step","roombaLocation","action","ttlDirtCollected","ttlWallHits","render","eastWall","southWall","currRoombaLocation","wallHits","dirtCollected","listOfDirtCollected","initialIndexOfDirt","findIndex","push","splice","i","length","currentInstruction","String","toUpperCase","nextLocation","console","log","indexOfDirt","JSONButton","jsonFile","fileReader","FileReader","onload","event","setState","JSON","parse","target","renderTable","file","readAsText","err"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Files from \"react-files\";\r\nimport './index.css';\r\n\r\nclass Table extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            roomDimensions: this.props.roomDimensions,\r\n            initialRoombaLocation: this.props.initialRoombaLocation,\r\n            dirtLocations: this.props.dirtLocations,\r\n            drivingInstructions: this.props.drivingInstructions,\r\n            \r\n            result: []\r\n        }\r\n    }\r\n    \r\n    renderTableData() {\r\n            return this.state.result.map((move, index) => {\r\n                const{ step, roombaLocation, action, ttlDirtCollected, ttlWallHits} = move;\r\n                return(\r\n                    <tr key={step}>\r\n                        <td>{step}</td>\r\n                        <td>{roombaLocation}</td>\r\n                        <td>{action}</td>\r\n                        <td>{ttlDirtCollected}</td>\r\n                        <td>{ttlWallHits}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        const eastWall = this.state.roomDimensions[0];\r\n        const southWall = this.state.roomDimensions[1];\r\n        var currRoombaLocation = this.state.initialRoombaLocation;\r\n        var wallHits = 0;\r\n        var dirtCollected = 0;\r\n        var listOfDirtCollected = [];\r\n        \r\n        var initialIndexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1]) //check if start on dirt\r\n            if(initialIndexOfDirt != -1){\r\n                dirtCollected++;\r\n                listOfDirtCollected.push(this.state.dirtLocations.splice(initialIndexOfDirt,1));\r\n        }\r\n        \r\n        this.state.result.push([{step: 1, roombaLocation: this.state.initialRoombaLocation, action: \"\", ttlDirtCollected: dirtCollected, ttlWallHits: 0}]); //create the initial row\r\n        \r\n        for(var i = 0; i<this.state.drivingInstructions.length; i++){\r\n            \r\n            var currentInstruction = String.toUpperCase(this.state.drivingInstructions[i]);\r\n            var nextLocation = currRoombaLocation;\r\n            switch(currentInstruction) {\r\n                case \"N\":\r\n                    nextLocation[1]--;\r\n                    break;\r\n                case \"S\":\r\n                    nextLocation[1]++;\r\n                    break;\r\n                case \"W\":\r\n                    nextLocation[0]--;\r\n                    break;\r\n                case \"E\":\r\n                    nextLocation[0]++;\r\n                    break;\r\n                default:\r\n                    console.log(\"Invalid Direction\");\r\n            }\r\n            \r\n            if(nextLocation[0]<0 || nextLocation[0] >= eastWall || nextLocation[1]<0 || nextLocation[1] >= southWall){\r\n                nextLocation = currRoombaLocation;\r\n                wallHits ++;\r\n            }\r\n            currRoombaLocation = nextLocation;\r\n            \r\n            var indexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1])\r\n            if(indexOfDirt != -1){\r\n                dirtCollected++;\r\n                listOfDirtCollected.push(this.state.dirtLocations.splice(indexOfDirt,1));\r\n            }\r\n            \r\n            this.state.result.push({step: i, roombaLocation: currRoombaLocation, action: currentInstruction, ttlDirtCollected: dirtCollected, ttlWallHits: wallHits});\r\n        }\r\n        return (\r\n            <div>\r\n                <table id ='steps'>\r\n                    <tbody>\r\n                        {this.renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass JSONButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        jsonFile: {}\r\n        };\r\n\r\n        this.fileReader = new FileReader();\r\n        this.fileReader.onload = event => {\r\n        this.setState({ jsonFile: JSON.parse(event.target.result) }, () => {\r\n        console.log(this.state.jsonFile);\r\n      });\r\n    };\r\n  }\r\n\r\n    renderTable() {\r\n        return <Table value={this.state.jsonFile} />;\r\n    }\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n      <div className=\"files\">\r\n        <Files\r\n          className=\"files-dropzone\"\r\n          onChange={file => {\r\n            this.fileReader.readAsText(file[0]);\r\n          }}\r\n          onError={err => console.log(err)}\r\n          accepts={[\".json\"]}\r\n          multiple\r\n          maxFiles={1}\r\n          maxFileSize={10000000}\r\n          minFileSize={0}\r\n          clickable\r\n        >\r\n          Drop files here or click to upload\r\n        </Files>\r\n      </div>\r\n      <div className=\"Table\">\r\n            {this.renderTable()}\r\n      </div>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// ==================================\r\nReactDOM.render(\r\n    <JSONButton />\r\n);"]},"metadata":{},"sourceType":"module"}