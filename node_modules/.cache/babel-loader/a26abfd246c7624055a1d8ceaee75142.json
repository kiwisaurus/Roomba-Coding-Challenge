{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Terrence Liu\\\\Documents\\\\Roomba Coding Challenge\\\\roomba-coding-challenge\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Files from \"react-files\";\nimport './index.css';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderTableData = () => {\n      return this.state.result.map(value => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: value.step\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"[\", value.roombaLocation[0], \",\", value.roombaLocation[1], \"]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value.action\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value.ttlDirtCollected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value.ttlWallHits\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 17\n        }, this);\n      });\n    };\n\n    this.state = {\n      Instructions: this.props.value,\n      result: []\n    };\n  }\n\n  render() {\n    //console.log(this.state.Instructions);\n    var roomDimensions = this.state.Instructions.roomDimensions;\n    var initialRoombaLocation = this.state.Instructions.initialRoombaLocation;\n    var dirtLocations = this.state.Instructions.dirtLocations;\n    var drivingInstructions = this.state.Instructions.drivingInstructions; //var result = [];\n\n    const eastWall = roomDimensions[0];\n    const southWall = roomDimensions[1];\n    var currRoombaLocation = initialRoombaLocation;\n    var wallHits = 0;\n    var dirtCollected = 0;\n    var distanceTraveled = 0;\n\n    function getIndex(loc) {\n      return dirtLocations.findIndex(obj => obj[0] === loc[0] && obj[1] === loc[1]);\n    }\n\n    var initialIndexOfDirt = getIndex(currRoombaLocation); //check if start on dirt\n\n    if (initialIndexOfDirt !== -1) {\n      dirtCollected++;\n      dirtLocations.splice(initialIndexOfDirt, 1);\n    }\n\n    this.state.result.push([{\n      step: 0,\n      roombaLocation: currRoombaLocation,\n      action: \"\",\n      ttlDirtCollected: dirtCollected,\n      ttlWallHits: 0\n    }]); //create the initial row\n    //console.log(result);\n\n    for (let i = 0; i < drivingInstructions.length; i++) {\n      var currentInstruction = drivingInstructions[i].toUpperCase();\n      var previous = [currRoombaLocation[0], currRoombaLocation[1]]; //console.log(currRoombaLocation);\n\n      switch (currentInstruction) {\n        case \"N\":\n          currRoombaLocation[1]++;\n          break;\n\n        case \"S\":\n          currRoombaLocation[1]--;\n          break;\n\n        case \"W\":\n          currRoombaLocation[0]--;\n          break;\n\n        case \"E\":\n          currRoombaLocation[0]++;\n          break;\n\n        default:\n          console.log(\"Invalid Direction\");\n      }\n\n      if (currRoombaLocation[0] < 0 || currRoombaLocation[0] >= eastWall || currRoombaLocation[1] < 0 || currRoombaLocation[1] >= southWall) {\n        currRoombaLocation = previous;\n        wallHits++;\n      } else {\n        distanceTraveled++;\n      }\n\n      var indexOfDirt = getIndex(currRoombaLocation);\n\n      if (indexOfDirt !== -1) {\n        dirtCollected++;\n        dirtLocations.splice(indexOfDirt, 1);\n      }\n\n      this.state.result.push({\n        step: i + 1,\n        roombaLocation: [currRoombaLocation[0], currRoombaLocation[1]],\n        action: currentInstruction,\n        ttlDirtCollected: dirtCollected,\n        ttlWallHits: wallHits,\n        ttlDistanceTraveled: distanceTraveled\n      }); //console.log(result);\n    }\n\n    console.log(this.state.result);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Roomba Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total Dirt Collected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total Wall Hits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this), this.renderTableData()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass JSONButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsonFile: {},\n      fileSent: false\n    };\n    this.fileReader = new FileReader();\n\n    this.fileReader.onload = event => {\n      this.setState({\n        jsonFile: JSON.parse(event.target.result)\n      }, () => {\n        //console.log(this.state.jsonFile);\n        this.setState({\n          fileSent: true\n        });\n      });\n    };\n  }\n  /*handleInput() {\r\n      this.setState({fileSent: true})\r\n  }*/\n\n\n  renderTable() {\n    return /*#__PURE__*/_jsxDEV(Table, {\n      value: this.state.jsonFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 14\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"files\",\n        children: /*#__PURE__*/_jsxDEV(Files, {\n          className: \"files-dropzone\",\n          onChange: file => {\n            this.fileReader.readAsText(file[0]);\n          },\n          onError: err => console.log(err),\n          accepts: [\".json\"],\n          multiple: true,\n          maxFiles: 1,\n          maxFileSize: 10000000,\n          minFileSize: 0,\n          clickable: true,\n          children: \"Drop files here or click to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }, this), this.state.fileSent ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Table\",\n        children: this.renderTable()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }, this);\n  }\n\n} // ==================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(JSONButton, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 172,\n  columnNumber: 5\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Terrence Liu/Documents/Roomba Coding Challenge/roomba-coding-challenge/src/index.js"],"names":["React","ReactDOM","Files","Table","Component","constructor","props","renderTableData","state","result","map","value","step","roombaLocation","action","ttlDirtCollected","ttlWallHits","Instructions","render","roomDimensions","initialRoombaLocation","dirtLocations","drivingInstructions","eastWall","southWall","currRoombaLocation","wallHits","dirtCollected","distanceTraveled","getIndex","loc","findIndex","obj","initialIndexOfDirt","splice","push","i","length","currentInstruction","toUpperCase","previous","console","log","indexOfDirt","ttlDistanceTraveled","JSONButton","jsonFile","fileSent","fileReader","FileReader","onload","event","setState","JSON","parse","target","renderTable","file","readAsText","err","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Files from \"react-files\";\r\nimport './index.css';\r\n\r\nclass Table extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Instructions: this.props.value,\r\n            result: []\r\n        }\r\n    }\r\n    renderTableData=  () => {\r\n        return this.state.result.map(value=> {\r\n            return (\r\n                <tr>\r\n                    <td>{value.step}</td>\r\n                    <td>[{value.roombaLocation[0]},{value.roombaLocation[1]}]</td>\r\n                    <td>{value.action}</td>\r\n                    <td>{value.ttlDirtCollected}</td>\r\n                    <td>{value.ttlWallHits}</td>\r\n                \r\n                </tr>\r\n                )\r\n        })\r\n    }\r\n    render() {\r\n        //console.log(this.state.Instructions);\r\n        var roomDimensions= this.state.Instructions.roomDimensions;\r\n        var initialRoombaLocation= this.state.Instructions.initialRoombaLocation;\r\n        var dirtLocations= this.state.Instructions.dirtLocations;\r\n        var drivingInstructions = this.state.Instructions.drivingInstructions;\r\n        //var result = [];\r\n            \r\n        const eastWall = roomDimensions[0];\r\n        const southWall = roomDimensions[1];\r\n        var currRoombaLocation = initialRoombaLocation;\r\n        var wallHits = 0;\r\n        var dirtCollected = 0;\r\n        var distanceTraveled =0;\r\n        \r\n        function getIndex(loc){\r\n            return dirtLocations.findIndex(obj => obj[0] === loc[0] && obj[1] === loc[1])\r\n        }\r\n        \r\n        var initialIndexOfDirt = getIndex(currRoombaLocation); //check if start on dirt\r\n            if(initialIndexOfDirt !== -1){\r\n                dirtCollected++;\r\n                dirtLocations.splice(initialIndexOfDirt,1);\r\n        }\r\n        \r\n        this.state.result.push([{step: 0, roombaLocation: currRoombaLocation, action: \"\", ttlDirtCollected: dirtCollected, ttlWallHits: 0}]); //create the initial row\r\n        //console.log(result);\r\n        \r\n        for(let i = 0; i<drivingInstructions.length; i++){\r\n            \r\n            var currentInstruction = drivingInstructions[i].toUpperCase();\r\n            var previous = [currRoombaLocation[0],currRoombaLocation[1]];\r\n            //console.log(currRoombaLocation);\r\n            switch(currentInstruction) {\r\n                case \"N\":\r\n                    currRoombaLocation[1]++;\r\n                    break;\r\n                case \"S\":\r\n                    currRoombaLocation[1]--;\r\n                    break;\r\n                case \"W\":\r\n                    currRoombaLocation[0]--;\r\n                    break;\r\n                case \"E\":\r\n                    currRoombaLocation[0]++;\r\n                    break;\r\n                default:\r\n                    console.log(\"Invalid Direction\");\r\n            }\r\n            \r\n            if(currRoombaLocation[0]<0 || currRoombaLocation[0] >= eastWall || currRoombaLocation[1]<0 || currRoombaLocation[1] >= southWall){\r\n                currRoombaLocation = previous;\r\n                wallHits ++;\r\n            }\r\n            else{\r\n                distanceTraveled++;\r\n            }\r\n            var indexOfDirt = getIndex(currRoombaLocation);\r\n            if(indexOfDirt !== -1){\r\n                dirtCollected++;\r\n                dirtLocations.splice(indexOfDirt,1);\r\n            }\r\n            this.state.result.push({step: i+1, roombaLocation: [currRoombaLocation[0], currRoombaLocation[1]], action: currentInstruction, ttlDirtCollected: dirtCollected, ttlWallHits: wallHits, ttlDistanceTraveled: distanceTraveled});\r\n            //console.log(result);\r\n        }\r\n        console.log(this.state.result);\r\n        \r\n        return (\r\n            <div>\r\n            <table>\r\n                <tr>\r\n                    <th>Step</th>\r\n                    <th>Roomba Location</th>\r\n                    <th>Action</th>\r\n                    <th>Total Dirt Collected</th>\r\n                    <th>Total Wall Hits</th>\r\n                </tr>\r\n            {this.renderTableData()}\r\n            </table>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nclass JSONButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            jsonFile: {},\r\n            fileSent: false\r\n            \r\n        };\r\n\r\n        this.fileReader = new FileReader();\r\n        this.fileReader.onload = event => {\r\n        this.setState({ jsonFile: JSON.parse(event.target.result) }, () => {\r\n        //console.log(this.state.jsonFile);\r\n        this.setState({fileSent: true});\r\n      });\r\n    };\r\n  }\r\n\r\n    /*handleInput() {\r\n        this.setState({fileSent: true})\r\n    }*/\r\n  renderTable() {\r\n      return <Table value={this.state.jsonFile} />;\r\n  }\r\n    \r\n  render() {\r\n    return (\r\n    <React.Fragment>\r\n      <div className=\"files\">\r\n        <Files\r\n          className=\"files-dropzone\"\r\n          onChange={file => {\r\n            this.fileReader.readAsText(file[0]);\r\n          }}\r\n          onError={err => console.log(err)}\r\n          accepts={[\".json\"]}\r\n          multiple\r\n          maxFiles={1}\r\n          maxFileSize={10000000}\r\n          minFileSize={0}\r\n          clickable\r\n        >\r\n          Drop files here or click to upload\r\n        </Files>\r\n      </div>\r\n    {\r\n        this.state.fileSent?\r\n        <div className =\"Table\">\r\n            {this.renderTable()}\r\n        </div>\r\n        :\r\n        <div></div>\r\n    }\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// ==================================\r\nReactDOM.render(\r\n    <JSONButton />, document.getElementById('root')\r\n);"]},"metadata":{},"sourceType":"module"}