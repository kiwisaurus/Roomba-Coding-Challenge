{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Terrence Liu\\\\Documents\\\\Roomba Coding Challenge\\\\roomba-coding-challenge\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Files from \"react-files\";\nimport './index.css';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Instructions: [],\n      loading: true,\n      result: []\n    };\n  }\n\n  renderTableData() {\n    return this.state.result.map((move, index) => {\n      const {\n        step,\n        roombaLocation,\n        action,\n        ttlDirtCollected,\n        ttlWallHits\n      } = move;\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: step\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: roombaLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: action\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: ttlDirtCollected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: ttlWallHits\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 25\n        }, this)]\n      }, step, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }, this);\n    });\n  }\n\n  render() {\n    if (props.loading) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Still Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 20\n      }, this);\n    } else {\n      var roomDimensions = this.state.Instructions.roomDimensions;\n      var initialRoombaLocation = this.state.Instructions.initialRoombaLocation;\n      var dirtLocations = this.state.Instructions.dirtLocations;\n      var drivingInstructions = this.state.Instructions.drivingInstructions;\n      const eastWall = this.state.roomDimensions[0];\n      const southWall = this.state.roomDimensions[1];\n      var currRoombaLocation = this.state.initialRoombaLocation;\n      var wallHits = 0;\n      var dirtCollected = 0;\n      var listOfDirtCollected = [];\n      var initialIndexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1]); //check if start on dirt\n\n      if (initialIndexOfDirt !== -1) {\n        dirtCollected++;\n        listOfDirtCollected.push(this.state.dirtLocations.splice(initialIndexOfDirt, 1));\n      }\n\n      this.state.result.push([{\n        step: 1,\n        roombaLocation: this.state.initialRoombaLocation,\n        action: \"\",\n        ttlDirtCollected: dirtCollected,\n        ttlWallHits: 0\n      }]); //create the initial row\n\n      for (var i = 0; i < this.state.drivingInstructions.length; i++) {\n        var currentInstruction = String.toUpperCase(this.state.drivingInstructions[i]);\n        var nextLocation = currRoombaLocation;\n\n        switch (currentInstruction) {\n          case \"N\":\n            nextLocation[1]--;\n            break;\n\n          case \"S\":\n            nextLocation[1]++;\n            break;\n\n          case \"W\":\n            nextLocation[0]--;\n            break;\n\n          case \"E\":\n            nextLocation[0]++;\n            break;\n\n          default:\n            console.log(\"Invalid Direction\");\n        }\n\n        if (nextLocation[0] < 0 || nextLocation[0] >= eastWall || nextLocation[1] < 0 || nextLocation[1] >= southWall) {\n          nextLocation = currRoombaLocation;\n          wallHits++;\n        }\n\n        currRoombaLocation = nextLocation;\n        var indexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1]);\n\n        if (indexOfDirt !== -1) {\n          dirtCollected++;\n          listOfDirtCollected.push(this.state.dirtLocations.splice(indexOfDirt, 1));\n        }\n\n        this.state.result.push({\n          step: i,\n          roombaLocation: currRoombaLocation,\n          action: currentInstruction,\n          ttlDirtCollected: dirtCollected,\n          ttlWallHits: wallHits\n        });\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"steps\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.renderTableData()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n}\n\nclass JSONButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsonFile: {},\n      fileSent: false\n    };\n    this.fileReader = new FileReader();\n\n    this.fileReader.onloadend = event => {\n      this.setState({\n        jsonFile: JSON.parse(event.target.result)\n      }, () => {\n        console.log(this.state.jsonFile);\n        this.setState({\n          fileSent: true\n        });\n      });\n    };\n  }\n  /*handleInput() {\r\n      this.setState({fileSent: true})\r\n  }*/\n\n\n  renderTable() {\n    return /*#__PURE__*/_jsxDEV(Table, {\n      value: this.state.jsonFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 14\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"files\",\n        children: /*#__PURE__*/_jsxDEV(Files, {\n          className: \"files-dropzone\",\n          onChange: file => {\n            this.fileReader.readAsText(file[0]);\n          },\n          onError: err => console.log(err),\n          accepts: [\".json\"],\n          multiple: true,\n          maxFiles: 1,\n          maxFileSize: 10000000,\n          minFileSize: 0,\n          clickable: true,\n          children: \"Drop files here or click to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this), this.state.fileSent ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Table\",\n        children: this.renderTable()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this);\n  }\n\n} // ==================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(JSONButton, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 164,\n  columnNumber: 5\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Terrence Liu/Documents/Roomba Coding Challenge/roomba-coding-challenge/src/index.js"],"names":["React","ReactDOM","Files","Table","Component","constructor","props","state","Instructions","loading","result","renderTableData","map","move","index","step","roombaLocation","action","ttlDirtCollected","ttlWallHits","render","roomDimensions","initialRoombaLocation","dirtLocations","drivingInstructions","eastWall","southWall","currRoombaLocation","wallHits","dirtCollected","listOfDirtCollected","initialIndexOfDirt","findIndex","push","splice","i","length","currentInstruction","String","toUpperCase","nextLocation","console","log","indexOfDirt","JSONButton","jsonFile","fileSent","fileReader","FileReader","onloadend","event","setState","JSON","parse","target","renderTable","file","readAsText","err","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAO,aAAP;;AAEA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,YAAY,EAAE,EADL;AAETC,MAAAA,OAAO,EAAE,IAFA;AAGTC,MAAAA,MAAM,EAAE;AAHC,KAAb;AAKH;;AAEDC,EAAAA,eAAe,GAAG;AACV,WAAO,KAAKJ,KAAL,CAAWG,MAAX,CAAkBE,GAAlB,CAAsB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1C,YAAK;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,cAAR;AAAwBC,QAAAA,MAAxB;AAAgCC,QAAAA,gBAAhC;AAAkDC,QAAAA;AAAlD,UAAiEN,IAAtE;AACA,0BACI;AAAA,gCACI;AAAA,oBAAKE;AAAL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,oBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA,oBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA,oBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA,SAASJ,IAAT;AAAA;AAAA;AAAA;AAAA,cADJ;AASH,KAXM,CAAP;AAYP;;AAEDK,EAAAA,MAAM,GAAG;AACL,QAAGd,KAAK,CAACG,OAAT,EAAiB;AACb,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFD,MAGI;AACJ,UAAIY,cAAc,GAAE,KAAKd,KAAL,CAAWC,YAAX,CAAwBa,cAA5C;AACA,UAAIC,qBAAqB,GAAE,KAAKf,KAAL,CAAWC,YAAX,CAAwBc,qBAAnD;AACA,UAAIC,aAAa,GAAE,KAAKhB,KAAL,CAAWC,YAAX,CAAwBe,aAA3C;AACA,UAAIC,mBAAmB,GAAG,KAAKjB,KAAL,CAAWC,YAAX,CAAwBgB,mBAAlD;AAEA,YAAMC,QAAQ,GAAG,KAAKlB,KAAL,CAAWc,cAAX,CAA0B,CAA1B,CAAjB;AACA,YAAMK,SAAS,GAAG,KAAKnB,KAAL,CAAWc,cAAX,CAA0B,CAA1B,CAAlB;AACA,UAAIM,kBAAkB,GAAG,KAAKpB,KAAL,CAAWe,qBAApC;AACA,UAAIM,QAAQ,GAAG,CAAf;AACA,UAAIC,aAAa,GAAG,CAApB;AACA,UAAIC,mBAAmB,GAAG,EAA1B;AAEA,UAAIC,kBAAkB,GAAG,KAAKxB,KAAL,CAAWgB,aAAX,CAAyBS,SAAzB,CAAmClB,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAaa,kBAAkB,CAAC,CAAD,CAA/B,IAAsCb,KAAK,CAAC,CAAD,CAAL,KAAaa,kBAAkB,CAAC,CAAD,CAAjH,CAAzB,CAbI,CAa2I;;AAC3I,UAAGI,kBAAkB,KAAK,CAAC,CAA3B,EAA6B;AACzBF,QAAAA,aAAa;AACbC,QAAAA,mBAAmB,CAACG,IAApB,CAAyB,KAAK1B,KAAL,CAAWgB,aAAX,CAAyBW,MAAzB,CAAgCH,kBAAhC,EAAmD,CAAnD,CAAzB;AACP;;AAED,WAAKxB,KAAL,CAAWG,MAAX,CAAkBuB,IAAlB,CAAuB,CAAC;AAAClB,QAAAA,IAAI,EAAE,CAAP;AAAUC,QAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWe,qBAArC;AAA4DL,QAAAA,MAAM,EAAE,EAApE;AAAwEC,QAAAA,gBAAgB,EAAEW,aAA1F;AAAyGV,QAAAA,WAAW,EAAE;AAAtH,OAAD,CAAvB,EAnBI,CAmBgJ;;AAEpJ,WAAI,IAAIgB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC,KAAK5B,KAAL,CAAWiB,mBAAX,CAA+BY,MAAhD,EAAwDD,CAAC,EAAzD,EAA4D;AAExD,YAAIE,kBAAkB,GAAGC,MAAM,CAACC,WAAP,CAAmB,KAAKhC,KAAL,CAAWiB,mBAAX,CAA+BW,CAA/B,CAAnB,CAAzB;AACA,YAAIK,YAAY,GAAGb,kBAAnB;;AACA,gBAAOU,kBAAP;AACI,eAAK,GAAL;AACIG,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;;AACJ,eAAK,GAAL;AACIA,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;;AACJ,eAAK,GAAL;AACIA,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;;AACJ,eAAK,GAAL;AACIA,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;;AACJ;AACIC,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAdR;;AAiBA,YAAGF,YAAY,CAAC,CAAD,CAAZ,GAAgB,CAAhB,IAAqBA,YAAY,CAAC,CAAD,CAAZ,IAAmBf,QAAxC,IAAoDe,YAAY,CAAC,CAAD,CAAZ,GAAgB,CAApE,IAAyEA,YAAY,CAAC,CAAD,CAAZ,IAAmBd,SAA/F,EAAyG;AACrGc,UAAAA,YAAY,GAAGb,kBAAf;AACAC,UAAAA,QAAQ;AACX;;AACDD,QAAAA,kBAAkB,GAAGa,YAArB;AAEA,YAAIG,WAAW,GAAG,KAAKpC,KAAL,CAAWgB,aAAX,CAAyBS,SAAzB,CAAmClB,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAaa,kBAAkB,CAAC,CAAD,CAA/B,IAAsCb,KAAK,CAAC,CAAD,CAAL,KAAaa,kBAAkB,CAAC,CAAD,CAAjH,CAAlB;;AACA,YAAGgB,WAAW,KAAK,CAAC,CAApB,EAAsB;AAClBd,UAAAA,aAAa;AACbC,UAAAA,mBAAmB,CAACG,IAApB,CAAyB,KAAK1B,KAAL,CAAWgB,aAAX,CAAyBW,MAAzB,CAAgCS,WAAhC,EAA4C,CAA5C,CAAzB;AACH;;AAED,aAAKpC,KAAL,CAAWG,MAAX,CAAkBuB,IAAlB,CAAuB;AAAClB,UAAAA,IAAI,EAAEoB,CAAP;AAAUnB,UAAAA,cAAc,EAAEW,kBAA1B;AAA8CV,UAAAA,MAAM,EAAEoB,kBAAtD;AAA0EnB,UAAAA,gBAAgB,EAAEW,aAA5F;AAA2GV,UAAAA,WAAW,EAAES;AAAxH,SAAvB;AACH;;AACD,0BACI;AAAA,+BACI;AAAO,UAAA,EAAE,EAAE,OAAX;AAAA,iCACI;AAAA,sBACK,KAAKjB,eAAL;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AASH;AACA;;AA/F+B;;AAkGpC,MAAMiC,UAAN,SAAyB5C,KAAK,CAACI,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTsC,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAMA,SAAKC,UAAL,GAAkB,IAAIC,UAAJ,EAAlB;;AACA,SAAKD,UAAL,CAAgBE,SAAhB,GAA4BC,KAAK,IAAI;AACrC,WAAKC,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAEO,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,MAAN,CAAa5C,MAAxB;AAAZ,OAAd,EAA6D,MAAM;AACnE+B,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnC,KAAL,CAAWsC,QAAvB;AACA,aAAKM,QAAL,CAAc;AAACL,UAAAA,QAAQ,EAAE;AAAX,SAAd;AACD,OAHC;AAIH,KALG;AAML;AAEC;AACJ;AACA;;;AACES,EAAAA,WAAW,GAAG;AACV,wBAAO,QAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKhD,KAAL,CAAWsC;AAAzB;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAEDzB,EAAAA,MAAM,GAAG;AACP,wBACA,QAAC,KAAD,CAAO,QAAP;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACE,QAAC,KAAD;AACE,UAAA,SAAS,EAAC,gBADZ;AAEE,UAAA,QAAQ,EAAEoC,IAAI,IAAI;AAChB,iBAAKT,UAAL,CAAgBU,UAAhB,CAA2BD,IAAI,CAAC,CAAD,CAA/B;AACD,WAJH;AAKE,UAAA,OAAO,EAAEE,GAAG,IAAIjB,OAAO,CAACC,GAAR,CAAYgB,GAAZ,CALlB;AAME,UAAA,OAAO,EAAE,CAAC,OAAD,CANX;AAOE,UAAA,QAAQ,MAPV;AAQE,UAAA,QAAQ,EAAE,CARZ;AASE,UAAA,WAAW,EAAE,QATf;AAUE,UAAA,WAAW,EAAE,CAVf;AAWE,UAAA,SAAS,MAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,EAmBI,KAAKnD,KAAL,CAAWuC,QAAX,gBACA;AAAK,QAAA,SAAS,EAAE,OAAhB;AAAA,kBACK,KAAKS,WAAL;AADL;AAAA;AAAA;AAAA;AAAA,cADA,gBAKA;AAAA;AAAA;AAAA;AAAA,cAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AA6BD;;AAvDsC,C,CA0DzC;;;AACAtD,QAAQ,CAACmB,MAAT,eACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,QADJ,EACoBuC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADpB","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Files from \"react-files\";\r\nimport './index.css';\r\n\r\nclass Table extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Instructions: [],\r\n            loading: true,\r\n            result: []\r\n        }\r\n    }\r\n    \r\n    renderTableData() {\r\n            return this.state.result.map((move, index) => {\r\n                const{ step, roombaLocation, action, ttlDirtCollected, ttlWallHits} = move;\r\n                return(\r\n                    <tr key={step}>\r\n                        <td>{step}</td>\r\n                        <td>{roombaLocation}</td>\r\n                        <td>{action}</td>\r\n                        <td>{ttlDirtCollected}</td>\r\n                        <td>{ttlWallHits}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        if(props.loading){\r\n            return <h1>Still Loading</h1>\r\n        }\r\n        else{\r\n        var roomDimensions= this.state.Instructions.roomDimensions;\r\n        var initialRoombaLocation= this.state.Instructions.initialRoombaLocation;\r\n        var dirtLocations= this.state.Instructions.dirtLocations;\r\n        var drivingInstructions = this.state.Instructions.drivingInstructions;\r\n            \r\n        const eastWall = this.state.roomDimensions[0];\r\n        const southWall = this.state.roomDimensions[1];\r\n        var currRoombaLocation = this.state.initialRoombaLocation;\r\n        var wallHits = 0;\r\n        var dirtCollected = 0;\r\n        var listOfDirtCollected = [];\r\n        \r\n        var initialIndexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1]) //check if start on dirt\r\n            if(initialIndexOfDirt !== -1){\r\n                dirtCollected++;\r\n                listOfDirtCollected.push(this.state.dirtLocations.splice(initialIndexOfDirt,1));\r\n        }\r\n        \r\n        this.state.result.push([{step: 1, roombaLocation: this.state.initialRoombaLocation, action: \"\", ttlDirtCollected: dirtCollected, ttlWallHits: 0}]); //create the initial row\r\n        \r\n        for(var i = 0; i<this.state.drivingInstructions.length; i++){\r\n            \r\n            var currentInstruction = String.toUpperCase(this.state.drivingInstructions[i]);\r\n            var nextLocation = currRoombaLocation;\r\n            switch(currentInstruction) {\r\n                case \"N\":\r\n                    nextLocation[1]--;\r\n                    break;\r\n                case \"S\":\r\n                    nextLocation[1]++;\r\n                    break;\r\n                case \"W\":\r\n                    nextLocation[0]--;\r\n                    break;\r\n                case \"E\":\r\n                    nextLocation[0]++;\r\n                    break;\r\n                default:\r\n                    console.log(\"Invalid Direction\");\r\n            }\r\n            \r\n            if(nextLocation[0]<0 || nextLocation[0] >= eastWall || nextLocation[1]<0 || nextLocation[1] >= southWall){\r\n                nextLocation = currRoombaLocation;\r\n                wallHits ++;\r\n            }\r\n            currRoombaLocation = nextLocation;\r\n            \r\n            var indexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1])\r\n            if(indexOfDirt !== -1){\r\n                dirtCollected++;\r\n                listOfDirtCollected.push(this.state.dirtLocations.splice(indexOfDirt,1));\r\n            }\r\n            \r\n            this.state.result.push({step: i, roombaLocation: currRoombaLocation, action: currentInstruction, ttlDirtCollected: dirtCollected, ttlWallHits: wallHits});\r\n        }\r\n        return (\r\n            <div>\r\n                <table id ='steps'>\r\n                    <tbody>\r\n                        {this.renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n    }\r\n}\r\n\r\nclass JSONButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            jsonFile: {},\r\n            fileSent: false\r\n            \r\n        };\r\n\r\n        this.fileReader = new FileReader();\r\n        this.fileReader.onloadend = event => {\r\n        this.setState({ jsonFile: JSON.parse(event.target.result) }, () => {\r\n        console.log(this.state.jsonFile);\r\n        this.setState({fileSent: true});\r\n      });\r\n    };\r\n  }\r\n\r\n    /*handleInput() {\r\n        this.setState({fileSent: true})\r\n    }*/\r\n  renderTable() {\r\n      return <Table value={this.state.jsonFile} />;\r\n  }\r\n    \r\n  render() {\r\n    return (\r\n    <React.Fragment>\r\n      <div className=\"files\">\r\n        <Files\r\n          className=\"files-dropzone\"\r\n          onChange={file => {\r\n            this.fileReader.readAsText(file[0]);\r\n          }}\r\n          onError={err => console.log(err)}\r\n          accepts={[\".json\"]}\r\n          multiple\r\n          maxFiles={1}\r\n          maxFileSize={10000000}\r\n          minFileSize={0}\r\n          clickable\r\n        >\r\n          Drop files here or click to upload\r\n        </Files>\r\n      </div>\r\n    {\r\n        this.state.fileSent?\r\n        <div className =\"Table\">\r\n            {this.renderTable()}\r\n        </div>\r\n        :\r\n        <div></div>\r\n    }\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// ==================================\r\nReactDOM.render(\r\n    <JSONButton />, document.getElementById('root')\r\n);"]},"metadata":{},"sourceType":"module"}