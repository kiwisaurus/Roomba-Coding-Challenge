{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Terrence Liu\\\\Documents\\\\Roomba Coding Challenge\\\\roomba-coding-challenge\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Files from \"react-files\";\nimport './index.css';\n/*class Table extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            roomDimensions: this.props.roomDimensions,\r\n            initialRoombaLocation: this.props.initialRoombaLocation,\r\n            dirtLocations: this.props.dirtLocations,\r\n            drivingInstructions: this.props.drivingInstructions,\r\n            \r\n            result: []\r\n        }\r\n    }\r\n    \r\n    renderTableData() {\r\n            return this.state.result.map((move, index) => {\r\n                const{ step, roombaLocation, action, ttlDirtCollected, ttlWallHits} = move;\r\n                return(\r\n                    <tr key={step}>\r\n                        <td>{step}</td>\r\n                        <td>{roombaLocation}</td>\r\n                        <td>{action}</td>\r\n                        <td>{ttlDirtCollected}</td>\r\n                        <td>{ttlWallHits}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        const eastWall = this.state.roomDimensions[0];\r\n        const southWall = this.state.roomDimensions[1];\r\n        var currRoombaLocation = this.state.initialRoombaLocation;\r\n        var wallHits = 0;\r\n        var dirtCollected = 0;\r\n        var listOfDirtCollected = [];\r\n        \r\n        var initialIndexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1]) //check if start on dirt\r\n            if(initialIndexOfDirt !== -1){\r\n                dirtCollected++;\r\n                listOfDirtCollected.push(this.state.dirtLocations.splice(initialIndexOfDirt,1));\r\n        }\r\n        \r\n        this.state.result.push([{step: 1, roombaLocation: this.state.initialRoombaLocation, action: \"\", ttlDirtCollected: dirtCollected, ttlWallHits: 0}]); //create the initial row\r\n        \r\n        for(var i = 0; i<this.state.drivingInstructions.length; i++){\r\n            \r\n            var currentInstruction = String.toUpperCase(this.state.drivingInstructions[i]);\r\n            var nextLocation = currRoombaLocation;\r\n            switch(currentInstruction) {\r\n                case \"N\":\r\n                    nextLocation[1]--;\r\n                    break;\r\n                case \"S\":\r\n                    nextLocation[1]++;\r\n                    break;\r\n                case \"W\":\r\n                    nextLocation[0]--;\r\n                    break;\r\n                case \"E\":\r\n                    nextLocation[0]++;\r\n                    break;\r\n                default:\r\n                    console.log(\"Invalid Direction\");\r\n            }\r\n            \r\n            if(nextLocation[0]<0 || nextLocation[0] >= eastWall || nextLocation[1]<0 || nextLocation[1] >= southWall){\r\n                nextLocation = currRoombaLocation;\r\n                wallHits ++;\r\n            }\r\n            currRoombaLocation = nextLocation;\r\n            \r\n            var indexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1])\r\n            if(indexOfDirt !== -1){\r\n                dirtCollected++;\r\n                listOfDirtCollected.push(this.state.dirtLocations.splice(indexOfDirt,1));\r\n            }\r\n            \r\n            this.state.result.push({step: i, roombaLocation: currRoombaLocation, action: currentInstruction, ttlDirtCollected: dirtCollected, ttlWallHits: wallHits});\r\n        }\r\n        return (\r\n            <div>\r\n                <table id ='steps'>\r\n                    <tbody>\r\n                        {this.renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}*/\n\nclass JSONButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsonFile: {}\n    };\n    this.fileReader = new FileReader();\n\n    this.fileReader.onload = event => {\n      this.setState({\n        jsonFile: JSON.parse(event.target.result)\n      }, () => {\n        console.log(this.state.jsonFile);\n      });\n    };\n  }\n\n  renderTable() {//return <Table value={this.state.jsonFile} />;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"files\",\n        children: /*#__PURE__*/_jsxDEV(Files, {\n          className: \"files-dropzone\",\n          onChange: file => {\n            this.fileReader.readAsText(file[0]);\n          },\n          onError: err => console.log(err),\n          accepts: [\".json\"],\n          multiple: true,\n          maxFiles: 1,\n          maxFileSize: 10000000,\n          minFileSize: 0,\n          clickable: true,\n          children: \"Drop files here or click to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Table\",\n        children: this.renderTable()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this);\n  }\n\n} // ==================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(JSONButton, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 145,\n  columnNumber: 5\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Terrence Liu/Documents/Roomba Coding Challenge/roomba-coding-challenge/src/index.js"],"names":["React","ReactDOM","Files","JSONButton","Component","constructor","props","state","jsonFile","fileReader","FileReader","onload","event","setState","JSON","parse","target","result","console","log","renderTable","render","file","readAsText","err","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACbC,MAAAA,QAAQ,EAAE;AADG,KAAb;AAIA,SAAKC,UAAL,GAAkB,IAAIC,UAAJ,EAAlB;;AACA,SAAKD,UAAL,CAAgBE,MAAhB,GAAyBC,KAAK,IAAI;AAClC,WAAKC,QAAL,CAAc;AAAEL,QAAAA,QAAQ,EAAEM,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,MAAN,CAAaC,MAAxB;AAAZ,OAAd,EAA6D,MAAM;AACnEC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,KAAL,CAAWC,QAAvB;AACD,OAFC;AAGH,KAJG;AAKL;;AAEDY,EAAAA,WAAW,GAAG,CACR;AACH;;AACHC,EAAAA,MAAM,GAAG;AACP,wBACI,QAAC,KAAD,CAAO,QAAP;AAAA,8BACF;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACE,QAAC,KAAD;AACE,UAAA,SAAS,EAAC,gBADZ;AAEE,UAAA,QAAQ,EAAEC,IAAI,IAAI;AAChB,iBAAKb,UAAL,CAAgBc,UAAhB,CAA2BD,IAAI,CAAC,CAAD,CAA/B;AACD,WAJH;AAKE,UAAA,OAAO,EAAEE,GAAG,IAAIN,OAAO,CAACC,GAAR,CAAYK,GAAZ,CALlB;AAME,UAAA,OAAO,EAAE,CAAC,OAAD,CANX;AAOE,UAAA,QAAQ,MAPV;AAQE,UAAA,QAAQ,EAAE,CARZ;AASE,UAAA,WAAW,EAAE,QATf;AAUE,UAAA,WAAW,EAAE,CAVf;AAWE,UAAA,SAAS,MAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADE,eAkBF;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,kBACO,KAAKJ,WAAL;AADP;AAAA;AAAA;AAAA;AAAA,cAlBE;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAwBD;;AA3CsC,C,CA8CzC;;;AACAnB,QAAQ,CAACoB,MAAT,eACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,QADJ,EACoBI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADpB","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Files from \"react-files\";\r\nimport './index.css';\r\n\r\n/*class Table extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            roomDimensions: this.props.roomDimensions,\r\n            initialRoombaLocation: this.props.initialRoombaLocation,\r\n            dirtLocations: this.props.dirtLocations,\r\n            drivingInstructions: this.props.drivingInstructions,\r\n            \r\n            result: []\r\n        }\r\n    }\r\n    \r\n    renderTableData() {\r\n            return this.state.result.map((move, index) => {\r\n                const{ step, roombaLocation, action, ttlDirtCollected, ttlWallHits} = move;\r\n                return(\r\n                    <tr key={step}>\r\n                        <td>{step}</td>\r\n                        <td>{roombaLocation}</td>\r\n                        <td>{action}</td>\r\n                        <td>{ttlDirtCollected}</td>\r\n                        <td>{ttlWallHits}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        const eastWall = this.state.roomDimensions[0];\r\n        const southWall = this.state.roomDimensions[1];\r\n        var currRoombaLocation = this.state.initialRoombaLocation;\r\n        var wallHits = 0;\r\n        var dirtCollected = 0;\r\n        var listOfDirtCollected = [];\r\n        \r\n        var initialIndexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1]) //check if start on dirt\r\n            if(initialIndexOfDirt !== -1){\r\n                dirtCollected++;\r\n                listOfDirtCollected.push(this.state.dirtLocations.splice(initialIndexOfDirt,1));\r\n        }\r\n        \r\n        this.state.result.push([{step: 1, roombaLocation: this.state.initialRoombaLocation, action: \"\", ttlDirtCollected: dirtCollected, ttlWallHits: 0}]); //create the initial row\r\n        \r\n        for(var i = 0; i<this.state.drivingInstructions.length; i++){\r\n            \r\n            var currentInstruction = String.toUpperCase(this.state.drivingInstructions[i]);\r\n            var nextLocation = currRoombaLocation;\r\n            switch(currentInstruction) {\r\n                case \"N\":\r\n                    nextLocation[1]--;\r\n                    break;\r\n                case \"S\":\r\n                    nextLocation[1]++;\r\n                    break;\r\n                case \"W\":\r\n                    nextLocation[0]--;\r\n                    break;\r\n                case \"E\":\r\n                    nextLocation[0]++;\r\n                    break;\r\n                default:\r\n                    console.log(\"Invalid Direction\");\r\n            }\r\n            \r\n            if(nextLocation[0]<0 || nextLocation[0] >= eastWall || nextLocation[1]<0 || nextLocation[1] >= southWall){\r\n                nextLocation = currRoombaLocation;\r\n                wallHits ++;\r\n            }\r\n            currRoombaLocation = nextLocation;\r\n            \r\n            var indexOfDirt = this.state.dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1])\r\n            if(indexOfDirt !== -1){\r\n                dirtCollected++;\r\n                listOfDirtCollected.push(this.state.dirtLocations.splice(indexOfDirt,1));\r\n            }\r\n            \r\n            this.state.result.push({step: i, roombaLocation: currRoombaLocation, action: currentInstruction, ttlDirtCollected: dirtCollected, ttlWallHits: wallHits});\r\n        }\r\n        return (\r\n            <div>\r\n                <table id ='steps'>\r\n                    <tbody>\r\n                        {this.renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}*/\r\n\r\nclass JSONButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        jsonFile: {}\r\n        };\r\n\r\n        this.fileReader = new FileReader();\r\n        this.fileReader.onload = event => {\r\n        this.setState({ jsonFile: JSON.parse(event.target.result) }, () => {\r\n        console.log(this.state.jsonFile);\r\n      });\r\n    };\r\n  }\r\n\r\n  renderTable() {\r\n        //return <Table value={this.state.jsonFile} />;\r\n    }\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n      <div className=\"files\">\r\n        <Files\r\n          className=\"files-dropzone\"\r\n          onChange={file => {\r\n            this.fileReader.readAsText(file[0]);\r\n          }}\r\n          onError={err => console.log(err)}\r\n          accepts={[\".json\"]}\r\n          multiple\r\n          maxFiles={1}\r\n          maxFileSize={10000000}\r\n          minFileSize={0}\r\n          clickable\r\n        >\r\n          Drop files here or click to upload\r\n        </Files>\r\n      </div>\r\n      <div className=\"Table\">\r\n            {this.renderTable()}\r\n      </div>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// ==================================\r\nReactDOM.render(\r\n    <JSONButton />, document.getElementById('root')\r\n);"]},"metadata":{},"sourceType":"module"}