{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Terrence Liu\\\\Documents\\\\Roomba Coding Challenge\\\\roomba-coding-challenge\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Files from \"react-files\";\nimport './index.css';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Instructions: this.props.value //result: []\n\n    };\n  }\n  /*renderTableData(result) {\r\n          return result.map((move, index) => {\r\n              const{ step, roombaLocation, action, ttlDirtCollected, ttlWallHits} = move;\r\n              return(\r\n                  <tr key={step}>\r\n                      <td>{step+1}</td>\r\n                      <td>{roombaLocation}</td>\r\n                      <td>{action}</td>\r\n                      <td>{ttlDirtCollected}</td>\r\n                      <td>{ttlWallHits}</td>\r\n                  </tr>\r\n              )\r\n          })\r\n  }*/\n\n\n  render() {\n    //console.log(this.state.Instructions);\n    var roomDimensions = this.state.Instructions.roomDimensions;\n    var initialRoombaLocation = this.state.Instructions.initialRoombaLocation;\n    var dirtLocations = this.state.Instructions.dirtLocations;\n    var drivingInstructions = this.state.Instructions.drivingInstructions;\n    var result = [];\n    const eastWall = roomDimensions[0];\n    const southWall = roomDimensions[1];\n    var currRoombaLocation = initialRoombaLocation;\n    var wallHits = 0;\n    var dirtCollected = 0;\n    var listOfDirtCollected = [];\n    var initialIndexOfDirt = dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1]); //check if start on dirt\n\n    if (initialIndexOfDirt !== -1) {\n      dirtCollected++;\n      listOfDirtCollected.push(dirtLocations.splice(initialIndexOfDirt, 1));\n    }\n\n    result.push([{\n      step: 0,\n      roombaLocation: initialRoombaLocation,\n      action: \"\",\n      ttlDirtCollected: dirtCollected,\n      ttlWallHits: 0\n    }]); //create the initial row\n\n    console.log(result);\n    /*for(let i = 0; i<drivingInstructions.length; i++){\r\n        \r\n        var currentInstruction = drivingInstructions[i].toUpperCase();\r\n        var nextLocation = currRoombaLocation;\r\n        switch(currentInstruction) {\r\n            case \"N\":\r\n                nextLocation[1]--;\r\n                break;\r\n            case \"S\":\r\n                nextLocation[1]++;\r\n                break;\r\n            case \"W\":\r\n                nextLocation[0]--;\r\n                break;\r\n            case \"E\":\r\n                nextLocation[0]++;\r\n                break;\r\n            default:\r\n                console.log(\"Invalid Direction\");\r\n        }\r\n        \r\n        if(nextLocation[0]<0 || nextLocation[0] >= eastWall || nextLocation[1]<0 || nextLocation[1] >= southWall){\r\n            nextLocation = currRoombaLocation;\r\n            wallHits ++;\r\n        }\r\n        currRoombaLocation = nextLocation;\r\n        \r\n        var indexOfDirt = dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1])\r\n        if(indexOfDirt !== -1){\r\n            dirtCollected++;\r\n            listOfDirtCollected.push(dirtLocations.splice(indexOfDirt,1));\r\n        }\r\n        \r\n        result.push({step: i+1, roombaLocation: currRoombaLocation, action: currentInstruction, ttlDirtCollected: dirtCollected, ttlWallHits: wallHits});\r\n        console.log(result);\r\n    }*/\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass JSONButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsonFile: {},\n      fileSent: false\n    };\n    this.fileReader = new FileReader();\n\n    this.fileReader.onload = event => {\n      this.setState({\n        jsonFile: JSON.parse(event.target.result)\n      }, () => {\n        //console.log(this.state.jsonFile);\n        this.setState({\n          fileSent: true\n        });\n      });\n    };\n  }\n  /*handleInput() {\r\n      this.setState({fileSent: true})\r\n  }*/\n\n\n  renderTable() {\n    return /*#__PURE__*/_jsxDEV(Table, {\n      value: this.state.jsonFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 14\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"files\",\n        children: /*#__PURE__*/_jsxDEV(Files, {\n          className: \"files-dropzone\",\n          onChange: file => {\n            this.fileReader.readAsText(file[0]);\n          },\n          onError: err => console.log(err),\n          accepts: [\".json\"],\n          multiple: true,\n          maxFiles: 1,\n          maxFileSize: 10000000,\n          minFileSize: 0,\n          clickable: true,\n          children: \"Drop files here or click to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }, this), this.state.fileSent ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Table\",\n        children: this.renderTable()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }, this);\n  }\n\n} // ==================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(JSONButton, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 161,\n  columnNumber: 5\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Terrence Liu/Documents/Roomba Coding Challenge/roomba-coding-challenge/src/index.js"],"names":["React","ReactDOM","Files","Table","Component","constructor","props","state","Instructions","value","render","roomDimensions","initialRoombaLocation","dirtLocations","drivingInstructions","result","eastWall","southWall","currRoombaLocation","wallHits","dirtCollected","listOfDirtCollected","initialIndexOfDirt","findIndex","index","push","splice","step","roombaLocation","action","ttlDirtCollected","ttlWallHits","console","log","JSONButton","jsonFile","fileSent","fileReader","FileReader","onload","event","setState","JSON","parse","target","renderTable","file","readAsText","err","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Files from \"react-files\";\r\nimport './index.css';\r\n\r\nclass Table extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Instructions: this.props.value\r\n            //result: []\r\n        }\r\n    }\r\n    \r\n    /*renderTableData(result) {\r\n            return result.map((move, index) => {\r\n                const{ step, roombaLocation, action, ttlDirtCollected, ttlWallHits} = move;\r\n                return(\r\n                    <tr key={step}>\r\n                        <td>{step+1}</td>\r\n                        <td>{roombaLocation}</td>\r\n                        <td>{action}</td>\r\n                        <td>{ttlDirtCollected}</td>\r\n                        <td>{ttlWallHits}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n    }*/\r\n    \r\n    render() {\r\n        //console.log(this.state.Instructions);\r\n        var roomDimensions= this.state.Instructions.roomDimensions;\r\n        var initialRoombaLocation= this.state.Instructions.initialRoombaLocation;\r\n        var dirtLocations= this.state.Instructions.dirtLocations;\r\n        var drivingInstructions = this.state.Instructions.drivingInstructions;\r\n        var result = [];\r\n            \r\n        const eastWall = roomDimensions[0];\r\n        const southWall = roomDimensions[1];\r\n        var currRoombaLocation = initialRoombaLocation;\r\n        var wallHits = 0;\r\n        var dirtCollected = 0;\r\n        var listOfDirtCollected = [];\r\n        \r\n        var initialIndexOfDirt = dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1]) //check if start on dirt\r\n            if(initialIndexOfDirt !== -1){\r\n                dirtCollected++;\r\n                listOfDirtCollected.push(dirtLocations.splice(initialIndexOfDirt,1));\r\n        }\r\n        \r\n        result.push([{step: 0, roombaLocation: initialRoombaLocation, action: \"\", ttlDirtCollected: dirtCollected, ttlWallHits: 0}]); //create the initial row\r\n        console.log(result);\r\n        \r\n        /*for(let i = 0; i<drivingInstructions.length; i++){\r\n            \r\n            var currentInstruction = drivingInstructions[i].toUpperCase();\r\n            var nextLocation = currRoombaLocation;\r\n            switch(currentInstruction) {\r\n                case \"N\":\r\n                    nextLocation[1]--;\r\n                    break;\r\n                case \"S\":\r\n                    nextLocation[1]++;\r\n                    break;\r\n                case \"W\":\r\n                    nextLocation[0]--;\r\n                    break;\r\n                case \"E\":\r\n                    nextLocation[0]++;\r\n                    break;\r\n                default:\r\n                    console.log(\"Invalid Direction\");\r\n            }\r\n            \r\n            if(nextLocation[0]<0 || nextLocation[0] >= eastWall || nextLocation[1]<0 || nextLocation[1] >= southWall){\r\n                nextLocation = currRoombaLocation;\r\n                wallHits ++;\r\n            }\r\n            currRoombaLocation = nextLocation;\r\n            \r\n            var indexOfDirt = dirtLocations.findIndex(index => index[0] === currRoombaLocation[0] && index[1] === currRoombaLocation[1])\r\n            if(indexOfDirt !== -1){\r\n                dirtCollected++;\r\n                listOfDirtCollected.push(dirtLocations.splice(indexOfDirt,1));\r\n            }\r\n            \r\n            result.push({step: i+1, roombaLocation: currRoombaLocation, action: currentInstruction, ttlDirtCollected: dirtCollected, ttlWallHits: wallHits});\r\n            console.log(result);\r\n        }*/\r\n        return (\r\n            <div>\r\n                <table>\r\n                    \r\n                </table>\r\n            </div>\r\n        )\r\n    \r\n    }\r\n}\r\n\r\nclass JSONButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            jsonFile: {},\r\n            fileSent: false\r\n            \r\n        };\r\n\r\n        this.fileReader = new FileReader();\r\n        this.fileReader.onload = event => {\r\n        this.setState({ jsonFile: JSON.parse(event.target.result) }, () => {\r\n        //console.log(this.state.jsonFile);\r\n        this.setState({fileSent: true});\r\n      });\r\n    };\r\n  }\r\n\r\n    /*handleInput() {\r\n        this.setState({fileSent: true})\r\n    }*/\r\n  renderTable() {\r\n      return <Table value={this.state.jsonFile} />;\r\n  }\r\n    \r\n  render() {\r\n    return (\r\n    <React.Fragment>\r\n      <div className=\"files\">\r\n        <Files\r\n          className=\"files-dropzone\"\r\n          onChange={file => {\r\n            this.fileReader.readAsText(file[0]);\r\n          }}\r\n          onError={err => console.log(err)}\r\n          accepts={[\".json\"]}\r\n          multiple\r\n          maxFiles={1}\r\n          maxFileSize={10000000}\r\n          minFileSize={0}\r\n          clickable\r\n        >\r\n          Drop files here or click to upload\r\n        </Files>\r\n      </div>\r\n    {\r\n        this.state.fileSent?\r\n        <div className =\"Table\">\r\n            {this.renderTable()}\r\n        </div>\r\n        :\r\n        <div></div>\r\n    }\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// ==================================\r\nReactDOM.render(\r\n    <JSONButton />, document.getElementById('root')\r\n);"]},"metadata":{},"sourceType":"module"}